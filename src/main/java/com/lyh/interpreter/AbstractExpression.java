package com.lyh.interpreter;

/**
 * @description: 抽象表达式
 * 解释器模式包含以下主要角色：
 *
 * 1.抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。
 * 2.终结符表达式（Terminal Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。
 * 3.非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。
 * 4.环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。
 *
 * 意图：
 * 给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
 * 主要解决：
 * 对于一些固定文法构建一个解释句子的解释器。
 *
 * 优点：
 * 1、可扩展性比较好，灵活。
 * 2、增加了新的解释表达式的方式。
 * 3、易于实现简单文法。
 * 缺点：
 * 1、可利用场景比较少。
 * 2、对于复杂的文法比较难维护。
 * 3、解释器模式会引起类膨胀。
 * 4、解释器模式采用递归调用方法。
 * @author: yaheng
 * @date: 2022/12/2 20:33
 */
public abstract class AbstractExpression {

    public abstract int interpret();

}
