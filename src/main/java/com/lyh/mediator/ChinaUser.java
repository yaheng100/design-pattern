package com.lyh.mediator;

/**
 * @description: 中国聊天用户
 * 具体同事类
 * 中介者模式：
 * 又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。
 * 中介者模式包含以下主要角色：
 *
 * 抽象中介者接口（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法（通信）。
 * 具体中介者（ConcreteMediator）角色：实现中介者接口， 是抽象中介者的子类 ，定义一个 集合 来管理同事对象，协调各个同事角色之间的交互关系， 维持了对各个同事对象的引用 ，因此它依赖于同事角色。
 * 抽象同事类（Colleague）角色： 它定义各个同事类公有的方法，并声明了一些抽象方法来供子类实现，同时它维持了一个对抽象中介者类的引用，其子类可以通过该引用来与中介者通信。
 * 具体同事类（Concrete Colleague）角色： 它是抽象同事类的子类；每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；在具体同事类中实现了在抽象同事类中声明的抽象方法。
 * 中介者模式的核心在于中介者类的引入，在中介者模式中，中介者类承担了两方面的职责： （ 所有对象之间的交互都 在 Mediator 类中进行）
 *
 * (1) 中转作用（结构性）：通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，
 * 当需要和其他同事进行通信时，可通过中介者来实现间接调用。该中转作用属于中介者在结构上的支持。
 *
 * (2) 协调作用（行为性）：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致的和中介者进行交互，
 * 而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。
 * 该协调作用属于中介者在行为上的支持。
 *
 * 1，优点：
 * 松散耦合:中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。
 * 这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。
 *
 * 集中控制交互:多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，
 * 当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。
 *
 * 一对多关联转变为一对一的关联:
 * 没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。
 *
 * 2，缺点：
 * 当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。
 *
 * 5 使用场景
 * (1) 系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。
 * (2) 一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。
 * (3) 想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。
 * 可以通过引入中介者类来实现，在中介者中定义对象交互的公共行为，如果需要改变行为则可以增加新的具体中介者类。
 *
 *
 * @author: yaheng
 * @date: 2022/11/22 2:12
 */
public class ChinaUser extends Colleague{

    public ChinaUser(String name,Mediator mediator) {
        this.name = name;
        this.mediator = mediator;
        mediator.register(this);
    }

    @Override
    public void sendMessage(String to, String message) {
        System.out.print("CN用户：");
        System.out.println(name+"向"+ to +"发送消息："+message);
        mediator.sendMessage(this,to,message);
    }

    @Override
    public void receiveMessage(String from, String message) {
        System.out.print("CN用户：");
        System.out.println(name+" 接收到来自 "+ from+"的消息："+message);
    }
}
