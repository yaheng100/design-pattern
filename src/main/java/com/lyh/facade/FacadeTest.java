package com.lyh.facade;

/**
 * @description: 外观模式测试类
 *
 * 外观模式(Facade Pattern)：外部与子系统的通信通过一个统一的外观对象进行，为子系统中的一组接口提供一个统一的入口。
 * 外观模式定义了一个高层接口，这个接口使得子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。
 * 外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。
 * 一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。
 *
 * 优点：
 * 1）降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响到调用它的客户类；
 * 2）对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易；
 * 3）降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响到外观对象。
 *
 * 缺点：
 * 1）不能很好地限制客户使用子系统类；
 * 2）增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。
 *
 * 思考：
 * 当系统需要进行分层设计时，可以考虑使用Facade模式。
 * 在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，
 * 此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性。
 *
 * 不能过多的或者不合理的使用外观模式，要让系统有层次，利于维护为目的。
 * @author: yaheng
 * @date: 2022/11/20 23:36
 */
public class FacadeTest {

    public static void main(String[] args) {
        CarFacade car = new CarFacade();
        car.carReady();
        System.out.println("=========");
        car.carRun();
        System.out.println("=========");
        car.carTurn();
        System.out.println("=========");
        car.carPark();
    }

}
